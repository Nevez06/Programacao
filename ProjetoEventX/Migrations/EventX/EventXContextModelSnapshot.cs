// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjetoEventX.Models;

#nullable disable

namespace ProjetoEventX.Migrations.EventX
{
    [DbContext(typeof(EventXContext))]
    partial class EventXContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser<int>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjetoEventX.Models.Administracao", b =>
                {
                    b.Property<int>("IdAdministrar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAdministrar"));

                    b.Property<int>("IdEvento")
                        .HasColumnType("integer");

                    b.Property<decimal>("Orcamento")
                        .HasColumnType("numeric");

                    b.Property<int?>("OrganizadorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric");

                    b.HasKey("IdAdministrar");

                    b.HasIndex("IdEvento");

                    b.HasIndex("OrganizadorId");

                    b.ToTable("Administracoes");
                });

            modelBuilder.Entity("ProjetoEventX.Models.AssistenteVirtual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlgoritmoIA")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataGeracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EventoId")
                        .HasColumnType("integer");

                    b.Property<string>("Sugestoes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.ToTable("AssistentesVirtuais");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CustoEstimado")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DataEvento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescricaoEvento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoraFim")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("IdTemplateEvento")
                        .HasColumnType("integer");

                    b.Property<int?>("LocalId")
                        .HasColumnType("integer");

                    b.Property<string>("NomeEvento")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OrganizadorId")
                        .HasColumnType("integer");

                    b.Property<int>("PublicoEstimado")
                        .HasColumnType("integer");

                    b.Property<string>("StatusEvento")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Planejado");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdTemplateEvento");

                    b.HasIndex("LocalId");

                    b.HasIndex("OrganizadorId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvaliacaoFeedback")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ComentarioFeedback")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataEnvioFeedback")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EventoId")
                        .HasColumnType("integer");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<string>("TipoFeedback")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ProjetoEventX.Models.ItemPedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoriaItemPedido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescricaoItemPedido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("ItensPedidos");
                });

            modelBuilder.Entity("ProjetoEventX.Models.ListaConvidado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfirmaPresenca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ConvidadoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EventoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConvidadoId");

                    b.HasIndex("EventoId");

                    b.ToTable("ListasConvidados");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Local", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacidade")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnderecoLocal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeLocal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TipoLocal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Locais");
                });

            modelBuilder.Entity("ProjetoEventX.Models.MensagemChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataEnvio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DestinatarioId")
                        .HasColumnType("integer");

                    b.Property<bool>("EhRespostaAssistente")
                        .HasColumnType("boolean");

                    b.Property<int>("EventoId")
                        .HasColumnType("integer");

                    b.Property<int>("RemetenteId")
                        .HasColumnType("integer");

                    b.Property<string>("TipoDestinatario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DestinatarioId");

                    b.HasIndex("EventoId");

                    b.HasIndex("RemetenteId");

                    b.ToTable("MensagemChats");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Notificacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataEnvio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DestinatarioId")
                        .HasColumnType("integer");

                    b.Property<int?>("EventoId")
                        .HasColumnType("integer");

                    b.Property<bool>("Lida")
                        .HasColumnType("boolean");

                    b.Property<string>("MensagemNotificacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrioridadeNotificacao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DestinatarioId");

                    b.HasIndex("EventoId");

                    b.ToTable("Notificacoes");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comprovante")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetodoPagamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<string>("StatusPagamento")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Pendente");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("Pagamentos");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataPedido")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EventoId")
                        .HasColumnType("integer");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrecoTotal")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Pendente");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Telefone")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Pessoas");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("numeric");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("ProjetoEventX.Models.TarefaEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataConclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataLimite")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescricaoTarefaEvento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventoId")
                        .HasColumnType("integer");

                    b.Property<string>("PrioridadeTarefaEvento")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ResponsavelId")
                        .HasColumnType("integer");

                    b.Property<string>("StatusConclusao")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Pendente");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("ResponsavelId");

                    b.ToTable("TarefasEventos");
                });

            modelBuilder.Entity("ProjetoEventX.Models.TemplateEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TipoEstilo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TituloTemplateEvento")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TemplatesEventos");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Convidado", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<int>");

                    b.Property<string>("ConfirmaPresenca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PessoaId")
                        .HasColumnType("integer");

                    b.Property<int?>("PessoaId1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.HasIndex("PessoaId1")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Convidado");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Fornecedor", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<int>");

                    b.Property<decimal>("AvaliacaoMedia")
                        .HasColumnType("numeric");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PessoaId")
                        .HasColumnType("integer");

                    b.Property<int?>("PessoaId1")
                        .HasColumnType("integer");

                    b.Property<string>("TipoServico")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.HasIndex("PessoaId1")
                        .IsUnique();

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("CreatedAt")
                                .HasColumnName("Fornecedor_CreatedAt");

                            t.Property("PessoaId")
                                .HasColumnName("Fornecedor_PessoaId");

                            t.Property("PessoaId1")
                                .HasColumnName("Fornecedor_PessoaId1");

                            t.Property("UpdatedAt")
                                .HasColumnName("Fornecedor_UpdatedAt");
                        });

                    b.HasDiscriminator().HasValue("Fornecedor");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Organizador", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<int>");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PessoaId")
                        .HasColumnType("integer");

                    b.Property<int?>("PessoaId1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.HasIndex("PessoaId1")
                        .IsUnique();

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("CreatedAt")
                                .HasColumnName("Organizador_CreatedAt");

                            t.Property("DataCadastro")
                                .HasColumnName("Organizador_DataCadastro");

                            t.Property("PessoaId")
                                .HasColumnName("Organizador_PessoaId");

                            t.Property("PessoaId1")
                                .HasColumnName("Organizador_PessoaId1");

                            t.Property("UpdatedAt")
                                .HasColumnName("Organizador_UpdatedAt");
                        });

                    b.HasDiscriminator().HasValue("Organizador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetoEventX.Models.Administracao", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Evento", "Evento")
                        .WithMany("Administracoes")
                        .HasForeignKey("IdEvento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoEventX.Models.Organizador", null)
                        .WithMany("Administracoes")
                        .HasForeignKey("OrganizadorId");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("ProjetoEventX.Models.AssistenteVirtual", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Evento", "Evento")
                        .WithMany("AssistentesVirtuais")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Evento", b =>
                {
                    b.HasOne("ProjetoEventX.Models.TemplateEvento", "TemplateEvento")
                        .WithMany("Eventos")
                        .HasForeignKey("IdTemplateEvento");

                    b.HasOne("ProjetoEventX.Models.Local", "Local")
                        .WithMany("Eventos")
                        .HasForeignKey("LocalId");

                    b.HasOne("ProjetoEventX.Models.Organizador", "Organizador")
                        .WithMany("Eventos")
                        .HasForeignKey("OrganizadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Local");

                    b.Navigation("Organizador");

                    b.Navigation("TemplateEvento");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Feedback", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Evento", "Evento")
                        .WithMany("Feedbacks")
                        .HasForeignKey("EventoId");

                    b.HasOne("ProjetoEventX.Models.Fornecedor", "Fornecedor")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FornecedorId");

                    b.Navigation("Evento");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("ProjetoEventX.Models.ItemPedido", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("ProjetoEventX.Models.ListaConvidado", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Convidado", "Convidado")
                        .WithMany("ListasConvidados")
                        .HasForeignKey("ConvidadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoEventX.Models.Evento", "Evento")
                        .WithMany("ListasConvidados")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convidado");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("ProjetoEventX.Models.MensagemChat", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Pessoa", "Destinatario")
                        .WithMany()
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjetoEventX.Models.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoEventX.Models.Pessoa", "Remetente")
                        .WithMany()
                        .HasForeignKey("RemetenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destinatario");

                    b.Navigation("Evento");

                    b.Navigation("Remetente");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Notificacao", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Pessoa", "Destinatario")
                        .WithMany("Notificacoes")
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoEventX.Models.Evento", "Evento")
                        .WithMany("Notificacoes")
                        .HasForeignKey("EventoId");

                    b.Navigation("Destinatario");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Pagamento", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Pedido", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Evento", "Evento")
                        .WithMany("Pedidos")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoEventX.Models.Fornecedor", null)
                        .WithMany("Pedidos")
                        .HasForeignKey("FornecedorId");

                    b.HasOne("ProjetoEventX.Models.Produto", "Produto")
                        .WithMany("Pedidos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Produto", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("ProjetoEventX.Models.TarefaEvento", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Evento", "Evento")
                        .WithMany("TarefasEventos")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoEventX.Models.Pessoa", "Responsavel")
                        .WithMany("TarefasResponsaveis")
                        .HasForeignKey("ResponsavelId");

                    b.Navigation("Evento");

                    b.Navigation("Responsavel");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Convidado", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Pessoa", "Pessoa")
                        .WithOne()
                        .HasForeignKey("ProjetoEventX.Models.Convidado", "PessoaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjetoEventX.Models.Pessoa", null)
                        .WithOne("Convidado")
                        .HasForeignKey("ProjetoEventX.Models.Convidado", "PessoaId1");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Fornecedor", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Pessoa", "Pessoa")
                        .WithOne()
                        .HasForeignKey("ProjetoEventX.Models.Fornecedor", "PessoaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjetoEventX.Models.Pessoa", null)
                        .WithOne("Fornecedor")
                        .HasForeignKey("ProjetoEventX.Models.Fornecedor", "PessoaId1");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Organizador", b =>
                {
                    b.HasOne("ProjetoEventX.Models.Pessoa", "Pessoa")
                        .WithOne()
                        .HasForeignKey("ProjetoEventX.Models.Organizador", "PessoaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjetoEventX.Models.Pessoa", null)
                        .WithOne("Organizador")
                        .HasForeignKey("ProjetoEventX.Models.Organizador", "PessoaId1");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Evento", b =>
                {
                    b.Navigation("Administracoes");

                    b.Navigation("AssistentesVirtuais");

                    b.Navigation("Feedbacks");

                    b.Navigation("ListasConvidados");

                    b.Navigation("Notificacoes");

                    b.Navigation("Pedidos");

                    b.Navigation("TarefasEventos");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Local", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Pessoa", b =>
                {
                    b.Navigation("Convidado");

                    b.Navigation("Fornecedor");

                    b.Navigation("Notificacoes");

                    b.Navigation("Organizador");

                    b.Navigation("TarefasResponsaveis");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Produto", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("ProjetoEventX.Models.TemplateEvento", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Convidado", b =>
                {
                    b.Navigation("ListasConvidados");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Fornecedor", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("ProjetoEventX.Models.Organizador", b =>
                {
                    b.Navigation("Administracoes");

                    b.Navigation("Eventos");
                });
#pragma warning restore 612, 618
        }
    }
}
